//SPDX-License-Identifier:GPL-3.0
pragma solidity >=0.5.0<0.9.0;
contract Lottery{
    address public manager;
    address payable[]public participants;


    constructor ()
    {
        manager=msg.sender;   // global variable

    }

    receive() external payable
    {
        participants.push(payable(msg.sender));
    }
    function getbalance() public view returns(uint)
    {
        return address(this).balance;
    }
}




write a program to perform dilation and errosion



a,th = cv2.threshold(img)
100,250,cv2.THRESH_BINARY)
c= cv2.erode(th,kernel,iteration=1)
d=cv2.dilate(th,kernel,iterations=1)


====================================================solidity projct==============================================================





//SPDX-License-Identifier:GPL-3.0
pragma solidity >=0.5.0<0.9.0;
contract Lottery{
    address public manager;
    address payable[]public participants;


    constructor ()
    {
        manager=msg.sender;   // global variable

    }

    receive() external payable 
    {
        require(msg.value==1 ether);
        participants.push(payable(msg.sender));
    }
    function getbalance() public view returns(uint)
    {
        require(msg.sender==manager);
        return address(this).balance;
    }
    function random() public view returns(uint){
       return uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp,participants.lenght)));
    }

    function selectionofwinner() public {
        require(msg.sender==manager);
        require(participants.length>=3);
        uint r=random();
        address payable winner;
        uint index=r% participants.length;
        winner = participants[index];
        winner.transfer(getbalance());

        participants=new address payable[](0);
    }
}


